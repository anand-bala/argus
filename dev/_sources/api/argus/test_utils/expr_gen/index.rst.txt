:py:mod:`argus.test_utils.expr_gen`
===================================

.. py:module:: argus.test_utils.expr_gen

.. autoapi-nested-parse::

   Hypothesis strategies to generate Argus expressions



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   argus.test_utils.expr_gen.Transformer



Functions
~~~~~~~~~

.. autoapisummary::

   argus.test_utils.expr_gen.argus_expr



Attributes
~~~~~~~~~~

.. autoapisummary::

   argus.test_utils.expr_gen.ARGUS_EXPR_GRAMMAR


.. py:class:: Transformer(visit_tokens: bool = True)


   Bases: :py:obj:`lark.Transformer`

   Transformers work bottom-up (or depth-first), starting with visiting the leaves and working
   their way up until ending at the root of the tree.

   For each node visited, the transformer will call the appropriate method (callbacks), according to the
   node's ``data``, and use the returned value to replace the node, thereby creating a new tree structure.

   Transformers can be used to implement map & reduce patterns. Because nodes are reduced from leaf to root,
   at any point the callbacks may assume the children have already been transformed (if applicable).

   If the transformer cannot find a method with the right name, it will instead call ``__default__``, which by
   default creates a copy of the node.

   To discard a node, return Discard (``lark.visitors.Discard``).

   ``Transformer`` can do anything ``Visitor`` can do, but because it reconstructs the tree,
   it is slightly less efficient.

   A transformer without methods essentially performs a non-memoized partial deepcopy.

   All these classes implement the transformer interface:

   - ``Transformer`` - Recursively transforms the tree. This is the one you probably want.
   - ``Transformer_InPlace`` - Non-recursive. Changes the tree in-place instead of returning new instances
   - ``Transformer_InPlaceRecursive`` - Recursive. Changes the tree in-place instead of returning new instances

   Parameters:
       visit_tokens (bool, optional): Should the transformer visit tokens in addition to rules.
                                      Setting this to ``False`` is slightly faster. Defaults to ``True``.
                                      (For processing ignored tokens, use the ``lexer_callbacks`` options)


   .. py:method:: INT(tok: lark.Token) -> lark.Token

      Convert the value of `tok` from string to int, while maintaining line number & column.

      Performs wrapping conversion for 32-bit integers



.. py:data:: ARGUS_EXPR_GRAMMAR

   

.. py:function:: argus_expr() -> str

   Strategy to generate an Argus STL expression from a pre-defined grammar


